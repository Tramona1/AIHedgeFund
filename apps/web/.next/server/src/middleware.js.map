{"version":3,"file":"src/middleware.js","mappings":"qFAAA,6DCAA,4LCMA,MAAeA,CAAAA,EAAAA,EAAAA,EAAAA,CAAcA,CAAC,CAC5BC,aAAc,CACZ,IACA,SACA,UACA,SACA,+BACA,yBACA,iCAEA,qBACA,eACA,eACD,CACD,MAAMC,UAAUC,CAAI,CAAEC,CAAG,CAAEC,CAAG,EAE5B,IAAMC,EAAOF,EAAIG,OAAO,CAACC,QAAQ,CAIjC,GAAIL,EAAKM,MAAM,EAAa,KAAK,CAAdH,GAMfH,EAAKM,MAAM,GAAc,CAATH,UAAAA,GAA8B,YAATA,CAAS,CAAQ,CALxD,EAK4D,KALrDI,EAAAA,EAAYA,CAACC,QAAQ,CAAC,IAAIC,IAAI,aAAcR,EAAIS,GAAG,GAW5D,GAAI,CAACV,EAAKM,MAAM,EAAI,CAACN,EAAKW,aAAa,CAAE,CACvC,IAAMC,EAAY,IAAIH,IAAI,SAAUR,EAAIS,GAAG,EAE3C,OADAE,EAAUC,YAAY,CAACC,GAAG,CAAC,eAAgBb,EAAIS,GAAG,EAC3CH,EAAAA,EAAYA,CAACC,QAAQ,CAACI,EAC/B,CAGA,OAAOL,EAAAA,EAAYA,CAACQ,IAAI,EAC1B,CACF,EAAE,CAEWC,CAFV,CAEmB,CACpBC,QAAS,CAEP,wDAEA,kBACD,EACD,MClDF,OACA,GAAO,CAAI,EAEX,0BACA,oBACA,wBACA,+BAAuC,EAAK,2DAkC7B,cACf,MAAW,OAAO,EAClB,KACA,OACA,cAjCA,QACA,IACA,oBACA,CAAU,SASV,WACA,iBACA,qBAWA,OAVA,MAAkB,QAAiC,IACnD,OACA,gBACA,+CACA,CAAa,EACb,0BACA,wBACA,uBACA,uBACA,CAAa,EACb,CACA,CACA,CAOA,CAAK,CACL","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/./src/middleware.ts","webpack://_N_E/"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","import { authMiddleware } from \"@clerk/nextjs\";\nimport { NextResponse } from \"next/server\";\n\n// This example protects all routes including api/trpc routes\n// Please edit this to allow other routes to be public as needed.\n// See https://clerk.com/docs/references/nextjs/auth-middleware for more information about configuring your middleware\nexport default authMiddleware({\n  publicRoutes: [\n    \"/\", \n    \"/login\", \n    \"/signup\", \n    \"/about\",\n    \"/api/economic-reports/recent\",\n    \"/api/interviews/recent\",\n    \"/api/users/:userId/preferences\",\n    // Allow all static assets\n    \"/_next/static/(.*)\",\n    \"/favicon.ico\",\n    \"/images/(.*)\",\n  ],\n  async afterAuth(auth, req, evt) {\n    // Get the pathname of the request\n    const path = req.nextUrl.pathname;\n    \n    // If the user is logged in and trying to access the home page, \n    // redirect them to the dashboard\n    if (auth.userId && path === \"/\") {\n      return NextResponse.redirect(new URL('/dashboard', req.url));\n    }\n    \n    // If the user is logged in and trying to access login or signup pages,\n    // redirect them to the dashboard\n    if (auth.userId && (path === \"/login\" || path === \"/signup\")) {\n      return NextResponse.redirect(new URL('/dashboard', req.url));\n    }\n    \n    // If the user is not logged in and trying to access a protected route,\n    // redirect them to the login page\n    if (!auth.userId && !auth.isPublicRoute) {\n      const signInUrl = new URL('/login', req.url);\n      signInUrl.searchParams.set('redirect_url', req.url);\n      return NextResponse.redirect(signInUrl);\n    }\n    \n    // For all other cases, proceed normally\n    return NextResponse.next();\n  }\n});\n\nexport const config = {\n  matcher: [\n    // Skip all static files except JS/CSS chunks and API routes\n    '/((?!_next/image|_next/static|_vercel|favicon.ico).*)',\n    // Always run for API routes\n    '/(api|trpc)(.*)',\n  ],\n}; ","import \"next/dist/server/web/globals\";\nimport { adapter } from \"next/dist/server/web/adapter\";\n// Import the userland code.\nimport * as _mod from \"private-next-root-dir/src/middleware.ts\";\nimport { edgeInstrumentationOnRequestError } from \"next/dist/server/web/globals\";\nimport { isNextRouterError } from \"next/dist/client/components/is-next-router-error\";\nconst mod = {\n    ..._mod\n};\nconst handler = mod.middleware || mod.default;\nconst page = \"/src/middleware\";\nif (typeof handler !== 'function') {\n    throw new Error(`The Middleware \"${page}\" must export a \\`middleware\\` or a \\`default\\` function`);\n}\n// Middleware will only sent out the FetchEvent to next server,\n// so load instrumentation module here and track the error inside middleware module.\nfunction errorHandledHandler(fn) {\n    return async (...args)=>{\n        try {\n            return await fn(...args);\n        } catch (err) {\n            // In development, error the navigation API usage in runtime,\n            // since it's not allowed to be used in middleware as it's outside of react component tree.\n            if (process.env.NODE_ENV !== 'production') {\n                if (isNextRouterError(err)) {\n                    err.message = `Next.js navigation API is not allowed to be used in Middleware.`;\n                    throw err;\n                }\n            }\n            const req = args[0];\n            const url = new URL(req.url);\n            const resource = url.pathname + url.search;\n            await edgeInstrumentationOnRequestError(err, {\n                path: resource,\n                method: req.method,\n                headers: Object.fromEntries(req.headers.entries())\n            }, {\n                routerKind: 'Pages Router',\n                routePath: '/middleware',\n                routeType: 'middleware',\n                revalidateReason: undefined\n            });\n            throw err;\n        }\n    };\n}\nexport default function nHandler(opts) {\n    return adapter({\n        ...opts,\n        page,\n        handler: errorHandledHandler(handler)\n    });\n}\n\n//# sourceMappingURL=middleware.js.map"],"names":["authMiddleware","publicRoutes","afterAuth","auth","req","evt","path","nextUrl","pathname","userId","NextResponse","redirect","URL","url","isPublicRoute","signInUrl","searchParams","set","next","config","matcher"],"sourceRoot":"","ignoreList":[]}