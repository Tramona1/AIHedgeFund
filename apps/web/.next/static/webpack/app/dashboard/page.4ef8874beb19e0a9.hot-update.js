"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
globalThis["webpackHotUpdate_N_E"]("app/dashboard/page",{

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   aiTriggersAPI: () => (/* binding */ aiTriggersAPI),\n/* harmony export */   economicReportsAPI: () => (/* binding */ economicReportsAPI),\n/* harmony export */   interviewsAPI: () => (/* binding */ interviewsAPI),\n/* harmony export */   stockUpdatesAPI: () => (/* binding */ stockUpdatesAPI),\n/* harmony export */   userPreferencesAPI: () => (/* binding */ userPreferencesAPI)\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/../../node_modules/.pnpm/process@0.11.10/node_modules/process/browser.js\");\n// API service for interacting with the backend\n/**\n * Base API URL from environment variable or fallback to localhost in development\n */ const API_BASE_URL = (()=>{\n    // Use environment variable if defined\n    if (process.env.NEXT_PUBLIC_API_URL) {\n        return process.env.NEXT_PUBLIC_API_URL;\n    }\n    // In browser environment, detect the current URL and port\n    if (true) {\n        const currentPort = window.location.port;\n        // If web app is running on port 3001 (fallback port), API is now on 3002\n        if (currentPort === '3001') {\n            return 'http://localhost:3002';\n        }\n    }\n    // Default fallback\n    return 'http://localhost:3002';\n})();\n/**\n * Generic API fetcher with error handling\n */ async function fetchAPI(endpoint) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const url = \"\".concat(API_BASE_URL).concat(endpoint);\n    // In Next.js environment, fetch should always be available\n    // Let's simplify and just use the global fetch\n    try {\n        const response = await fetch(url, {\n            ...options,\n            headers: {\n                'Content-Type': 'application/json',\n                ...options.headers\n            }\n        });\n        if (!response.ok) {\n            const error = await response.json();\n            throw new Error(error.message || 'An error occurred while fetching the data.');\n        }\n        return response.json();\n    } catch (error) {\n        console.error(\"Failed to fetch from \".concat(url, \":\"), error);\n        // Re-throw to allow components to handle the error\n        throw error;\n    }\n}\n/**\n * Stock Updates API\n */ const stockUpdatesAPI = {\n    /**\n   * Get all stock updates\n   */ getAll: ()=>fetchAPI('/api/updates'),\n    /**\n   * Get stock updates for a specific ticker\n   */ getByTicker: (ticker)=>fetchAPI(\"/api/updates/ticker/\".concat(ticker)),\n    /**\n   * Create a new stock update (admin only in production)\n   */ create: (data)=>fetchAPI('/api/updates', {\n            method: 'POST',\n            body: JSON.stringify(data)\n        })\n};\n/**\n * User Preferences API\n */ const userPreferencesAPI = {\n    /**\n   * Get user preferences\n   */ get: (userId)=>fetchAPI(\"/api/users/\".concat(userId, \"/preferences\")),\n    /**\n   * Create or update user preferences\n   */ update: (data)=>fetchAPI('/api/users/preferences', {\n            method: 'POST',\n            body: JSON.stringify(data)\n        })\n};\n/**\n * AI Triggers API (for demonstration purposes - in production this would be restricted)\n */ const aiTriggersAPI = {\n    /**\n   * Get AI triggers for a specific ticker\n   */ getByTicker: (ticker)=>fetchAPI(\"/api/ai-triggers/\".concat(ticker)),\n    /**\n   * Send a test notification (development only)\n   */ sendTestNotification: (data)=>fetchAPI('/api/notifications/test', {\n            method: 'POST',\n            body: JSON.stringify(data)\n        }),\n    /**\n   * Create a test AI trigger (development/demo purposes only)\n   */ createTestTrigger: (data)=>fetchAPI('/api/ai-triggers/test', {\n            method: 'POST',\n            body: JSON.stringify(data)\n        })\n};\n/**\n * Economic Reports API\n */ const economicReportsAPI = {\n    /**\n   * Get recent economic reports\n   */ getRecent: function() {\n        let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;\n        return fetchAPI(\"/api/economic-reports/recent?limit=\".concat(limit));\n    },\n    /**\n   * Get economic reports by source\n   */ getBySource: function(source) {\n        let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 10;\n        return fetchAPI(\"/api/economic-reports/recent?source=\".concat(source, \"&limit=\").concat(limit));\n    },\n    /**\n   * Get economic reports by category\n   */ getByCategory: function(category) {\n        let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 10;\n        return fetchAPI(\"/api/economic-reports/recent?category=\".concat(category, \"&limit=\").concat(limit));\n    },\n    /**\n   * Get available economic report sources\n   */ getSources: ()=>fetchAPI('/api/economic-reports/sources'),\n    /**\n   * Get available economic report categories\n   */ getCategories: ()=>fetchAPI('/api/economic-reports/categories')\n};\n/**\n * Interviews API\n */ const interviewsAPI = {\n    /**\n   * Get recent interviews\n   */ getRecent: function() {\n        let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;\n        return fetchAPI(\"/api/interviews/recent?limit=\".concat(limit));\n    },\n    /**\n   * Get interviews by speaker\n   */ getBySpeaker: function(speaker) {\n        let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 10;\n        return fetchAPI(\"/api/interviews/recent?speaker=\".concat(speaker, \"&limit=\").concat(limit));\n    },\n    /**\n   * Get available interview speakers\n   */ getSpeakers: ()=>fetchAPI('/api/interviews/speakers')\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ })

});