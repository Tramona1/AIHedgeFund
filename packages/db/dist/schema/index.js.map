{"version":3,"sources":["../../src/schema/user-preferences.ts","../../src/schema/stock-updates.ts","../../src/schema/stock-events.ts"],"sourcesContent":["import { pgTable, text, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Define the user preferences table\nexport const userPreferences = pgTable(\"user_preferences\", {\n  id: text(\"id\").primaryKey(),\n  userId: text(\"user_id\").notNull().unique(),\n  email: text(\"email\").notNull(),\n  tickers: text(\"tickers\").array(),\n  sectors: text(\"sectors\").array(),\n  tradingStyle: text(\"trading_style\"),\n  updateFrequency: text(\"update_frequency\").default(\"weekly\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  customTriggers: jsonb(\"custom_triggers\"),\n});\n\n// Create Zod schemas for validation\nexport const insertUserPreferencesSchema = createInsertSchema(userPreferences, {\n  tickers: z.array(z.string()).optional(),\n  sectors: z.array(z.string()).optional(),\n  tradingStyle: z.string().optional(),\n  updateFrequency: z.enum([\"daily\", \"weekly\", \"realtime\"]).default(\"weekly\"),\n  customTriggers: z.record(z.string(), z.any()).optional(),\n});\n\nexport const selectUserPreferencesSchema = createSelectSchema(userPreferences);\n\n// Type definitions\nexport type UserPreferences = typeof userPreferences.$inferSelect;\nexport type NewUserPreferences = typeof userPreferences.$inferInsert; ","import { pgTable, text, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Define the stock updates table\nexport const stockUpdates = pgTable(\"stock_updates\", {\n  id: text(\"id\").primaryKey(),\n  ticker: text(\"ticker\").notNull(),\n  eventType: text(\"event_type\").notNull(),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  details: jsonb(\"details\"),\n  source: text(\"source\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  sentAt: timestamp(\"sent_at\"),\n});\n\n// Create Zod schemas for validation\nexport const insertStockUpdateSchema = createInsertSchema(stockUpdates, {\n  eventType: z.enum([\n    \"hedge_fund_buy\",\n    \"hedge_fund_sell\",\n    \"investor_mention\",\n    \"market_shift\",\n    \"technical_signal\",\n    \"option_flow\",\n    \"dark_pool_buy\",\n    \"politician_buy\",\n    \"politician_sell\"\n  ]),\n  details: z.record(z.string(), z.any()).optional(),\n});\n\nexport const selectStockUpdateSchema = createSelectSchema(stockUpdates);\n\n// Type definitions\nexport type StockUpdate = typeof stockUpdates.$inferSelect;\nexport type NewStockUpdate = typeof stockUpdates.$inferInsert; ","import { pgTable, text, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Define the stock events table for AI triggers\nexport const stockEvents = pgTable(\"stock_events\", {\n  id: text(\"id\").primaryKey(),\n  ticker: text(\"ticker\").notNull(),\n  eventType: text(\"event_type\").notNull(),\n  details: jsonb(\"details\"),\n  source: text(\"source\"),\n  timestamp: timestamp(\"timestamp\").defaultNow().notNull(),\n  processed: text(\"processed\").default(\"pending\").notNull(),\n  processedAt: timestamp(\"processed_at\"),\n});\n\n// Create Zod schemas for validation\nexport const insertStockEventSchema = createInsertSchema(stockEvents, {\n  eventType: z.enum([\n    \"hedge_fund_buy\",\n    \"hedge_fund_sell\",\n    \"investor_mention\",\n    \"market_shift\",\n    \"technical_signal\",\n    \"option_flow\",\n    \"dark_pool_buy\",\n    \"politician_buy\",\n    \"politician_sell\"\n  ]),\n  details: z.record(z.string(), z.any()).optional(),\n  processed: z.enum([\"pending\", \"processing\", \"completed\", \"failed\"]).default(\"pending\"),\n});\n\nexport const selectStockEventSchema = createSelectSchema(stockEvents);\n\n// Type definitions\nexport type StockEvent = typeof stockEvents.$inferSelect;\nexport type NewStockEvent = typeof stockEvents.$inferInsert; "],"mappings":"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","names":["pgTable","text","timestamp","jsonb","createInsertSchema","createSelectSchema","z","pgTable","text","timestamp","jsonb","createInsertSchema","createSelectSchema","z"]}