{"version":3,"sources":["../src/index.ts","../src/schema/index.ts","../src/schema/user-preferences.ts","../src/schema/stock-updates.ts","../src/schema/stock-events.ts","../src/schema/ai-triggers.ts","../src/types.ts"],"sourcesContent":["import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport * as schema from \"./schema/index\";\nimport { userPreferences, users } from \"./schema/user-preferences\";\nimport { stockUpdates } from \"./schema/stock-updates\";\nimport { aiTriggers } from \"./schema/ai-triggers\";\n\n// Get database URL with a fallback\nconst databaseUrl = process.env.DATABASE_URL || 'postgres://postgres@localhost:5432/ai_hedge_fund';\n\nconsole.log(\"Initializing database connection with:\", databaseUrl);\n\n// Create a PostgreSQL client with minimal options - simplified based on successful tests\nconst client = postgres(databaseUrl, {\n  connection: {\n    search_path: 'public'\n  }\n});\n\n// Create a drizzle ORM instance - explicitly including userPreferences in the schema\nexport const db = drizzle(client, { \n  schema: {\n    ...schema,\n    // Also expose the tables directly\n    userPreferences,\n    users,\n    stockUpdates,\n    aiTriggers\n  } \n});\n\n// Log successful initialization\nconsole.log(\"Database initialized successfully\");\n\n// Export schema for use in other modules\nexport * from \"./schema/index\";\n\n// Export validators and types\nexport * from \"./types\";\n\n// Default export\nexport default db; ","// Export all schema modules\nexport * from \"./user-preferences\";\nexport * from \"./stock-updates\";\nexport * from \"./stock-events\";\nexport * from \"./ai-triggers\"; ","import { pgTable, text, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Define the user preferences table with explicit table name\nexport const userPreferences = pgTable(\"user_preferences\", {\n  id: text(\"id\").primaryKey(),\n  userId: text(\"user_id\").notNull().unique(),\n  email: text(\"email\").notNull(),\n  tickers: text(\"tickers\").array(),\n  sectors: text(\"sectors\").array(),\n  tradingStyle: text(\"trading_style\"),\n  updateFrequency: text(\"update_frequency\").default(\"weekly\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  customTriggers: jsonb(\"custom_triggers\"),\n});\n\n// Add a direct reference for users module access\nexport const users = userPreferences;\n\n// Create Zod schemas for validation\nexport const insertUserPreferencesSchema = createInsertSchema(userPreferences, {\n  tickers: z.array(z.string()).optional(),\n  sectors: z.array(z.string()).optional(),\n  tradingStyle: z.string().optional(),\n  updateFrequency: z.enum([\"daily\", \"weekly\", \"realtime\"]).default(\"weekly\"),\n  customTriggers: z.record(z.string(), z.any()).optional(),\n});\n\nexport const selectUserPreferencesSchema = createSelectSchema(userPreferences);\n\n// Type definitions\nexport type UserPreferences = typeof userPreferences.$inferSelect;\nexport type NewUserPreferences = typeof userPreferences.$inferInsert; ","import { pgTable, text, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Define the stock updates table\nexport const stockUpdates = pgTable(\"stock_updates\", {\n  id: text(\"id\").primaryKey(),\n  ticker: text(\"ticker\").notNull(),\n  eventType: text(\"event_type\").notNull(),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  details: jsonb(\"details\"),\n  source: text(\"source\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  sentAt: timestamp(\"sent_at\"),\n});\n\n// Create Zod schemas for validation\nexport const insertStockUpdateSchema = createInsertSchema(stockUpdates, {\n  eventType: z.enum([\n    \"hedge_fund_buy\",\n    \"hedge_fund_sell\",\n    \"investor_mention\",\n    \"market_shift\",\n    \"technical_signal\",\n    \"option_flow\",\n    \"dark_pool_buy\",\n    \"politician_buy\",\n    \"politician_sell\"\n  ]),\n  details: z.record(z.string(), z.any()).optional(),\n});\n\nexport const selectStockUpdateSchema = createSelectSchema(stockUpdates);\n\n// Type definitions\nexport type StockUpdate = typeof stockUpdates.$inferSelect;\nexport type NewStockUpdate = typeof stockUpdates.$inferInsert; ","import { pgTable, text, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Define the stock events table for AI triggers\nexport const stockEvents = pgTable(\"stock_events\", {\n  id: text(\"id\").primaryKey(),\n  ticker: text(\"ticker\").notNull(),\n  eventType: text(\"event_type\").notNull(),\n  details: jsonb(\"details\"),\n  source: text(\"source\"),\n  timestamp: timestamp(\"timestamp\").defaultNow().notNull(),\n  processed: text(\"processed\").default(\"pending\").notNull(),\n  processedAt: timestamp(\"processed_at\"),\n});\n\n// Create Zod schemas for validation\nexport const insertStockEventSchema = createInsertSchema(stockEvents, {\n  eventType: z.enum([\n    \"hedge_fund_buy\",\n    \"hedge_fund_sell\",\n    \"investor_mention\",\n    \"market_shift\",\n    \"technical_signal\",\n    \"option_flow\",\n    \"dark_pool_buy\",\n    \"politician_buy\",\n    \"politician_sell\"\n  ]),\n  details: z.record(z.string(), z.any()).optional(),\n  processed: z.enum([\"pending\", \"processing\", \"completed\", \"failed\"]).default(\"pending\"),\n});\n\nexport const selectStockEventSchema = createSelectSchema(stockEvents);\n\n// Type definitions\nexport type StockEvent = typeof stockEvents.$inferSelect;\nexport type NewStockEvent = typeof stockEvents.$inferInsert; ","import { pgTable, text, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Define the AI triggers table\nexport const aiTriggers = pgTable(\"ai_triggers\", {\n  id: text(\"id\").primaryKey(),\n  ticker: text(\"ticker\").notNull(),\n  eventType: text(\"event_type\").notNull(),\n  details: jsonb(\"details\"),\n  source: text(\"source\"),\n  timestamp: timestamp(\"timestamp\").defaultNow().notNull(),\n  processed: text(\"processed\").default(\"pending\").notNull(),\n  processedAt: timestamp(\"processed_at\"),\n});\n\n// Create Zod schemas for validation\nexport const insertAiTriggerSchema = createInsertSchema(aiTriggers, {\n  details: z.record(z.string(), z.any()).optional(),\n});\n\nexport const selectAiTriggerSchema = createSelectSchema(aiTriggers);\n\n// Type definitions\nexport type AiTrigger = typeof aiTriggers.$inferSelect;\nexport type NewAiTrigger = typeof aiTriggers.$inferInsert; ","import { z } from \"zod\";\n\n// Re-export all schema validators\nexport * from \"./schema/user-preferences\";\nexport * from \"./schema/stock-updates\";\nexport * from \"./schema/stock-events\";\nexport * from \"./schema/ai-triggers\";\n\n// AI Trigger Payload Schema for API validation\nexport const aiTriggerPayloadSchema = z.object({\n  event_type: z.enum([\n    \"hedge_fund_buy\",\n    \"hedge_fund_sell\",\n    \"investor_mention\",\n    \"market_shift\",\n    \"technical_signal\",\n    \"option_flow\",\n    \"dark_pool_buy\",\n    \"politician_buy\",\n    \"politician_sell\"\n  ]),\n  ticker: z.string(),\n  fund: z.string().optional(),\n  shares: z.number().int().optional(),\n  shares_value: z.number().optional(),\n  investor: z.string().optional(),\n  source: z.string().optional(),\n  timestamp: z.string().datetime(),\n  details: z.record(z.string(), z.any()).optional(),\n});\n\n// Type definition for AI Trigger Payload\nexport type AITriggerPayload = z.infer<typeof aiTriggerPayloadSchema>; "],"mappings":"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","names":["import_pg_core","import_drizzle_zod","import_zod","import_pg_core","import_drizzle_zod","import_zod","import_pg_core","import_drizzle_zod","import_zod","import_zod","postgres"]}