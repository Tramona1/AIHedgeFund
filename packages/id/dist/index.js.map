{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { nanoid } from 'nanoid';\n\n// Define ID types\nexport type ID = string;\n\n// Define ID prefixes for different entities\nexport enum IDPrefix {\n  USER = 'user_',\n  STOCK_UPDATE = 'update_',\n  AI_TRIGGER = 'trigger_',\n  REPORT = 'report_',\n  INTERVIEW = 'interview_',\n}\n\n// Generate a new ID with the specified prefix and optional length\nexport function generateId(prefix: IDPrefix, length: number = 12): ID {\n  return `${prefix}${nanoid(length)}`;\n}\n\n// Validate if an ID has the expected format and prefix\nexport function validateId(id: string, prefix: IDPrefix): boolean {\n  return id.startsWith(prefix) && id.length > prefix.length;\n}\n\n// Extract the base ID without the prefix\nexport function extractBaseId(id: string, prefix: IDPrefix): string | null {\n  if (!validateId(id, prefix)) {\n    return null;\n  }\n  return id.substring(prefix.length);\n}\n\n// Default export\nexport default {\n  generateId,\n  validateId,\n  extractBaseId,\n  IDPrefix,\n}; "],"mappings":";AAAA,SAAS,cAAc;AAMhB,IAAK,WAAL,kBAAKA,cAAL;AACL,EAAAA,UAAA,UAAO;AACP,EAAAA,UAAA,kBAAe;AACf,EAAAA,UAAA,gBAAa;AACb,EAAAA,UAAA,YAAS;AACT,EAAAA,UAAA,eAAY;AALF,SAAAA;AAAA,GAAA;AASL,SAAS,WAAW,QAAkB,SAAiB,IAAQ;AACpE,SAAO,GAAG,MAAM,GAAG,OAAO,MAAM,CAAC;AACnC;AAGO,SAAS,WAAW,IAAY,QAA2B;AAChE,SAAO,GAAG,WAAW,MAAM,KAAK,GAAG,SAAS,OAAO;AACrD;AAGO,SAAS,cAAc,IAAY,QAAiC;AACzE,MAAI,CAAC,WAAW,IAAI,MAAM,GAAG;AAC3B,WAAO;AAAA,EACT;AACA,SAAO,GAAG,UAAU,OAAO,MAAM;AACnC;AAGA,IAAO,gBAAQ;AAAA,EACb;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;","names":["IDPrefix"]}